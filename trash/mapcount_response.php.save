<?php 

####################################
# Required File Structure:         #
#                                  #
# subdirectories/                  #
#   --fastq_to_be_crunched/        #
#   --fasta_directory/             #
#   --annotation_directory/        #
#   --temp_output/                 #
#   --bash_scripts/                #
#   --mapcount_output/             #
#   --logs/                        #
#                                  #
# Modify $subdirectories to change #
#   the root of the file system    #
####################################

$ini = parse_ini_file("../config.ini.php", true);
$admin = $ini['login']['admin'];
$def_path = $ini['login']['default'];
$subdirectories = $ini['filepaths']['subdirectories'];

session_start();

if ( (isset($_SESSION['LAST_ACTIVITY']) && (time() - $_SESSION['LAST_ACTIVITY'] > 1800)) || 
   (isset($_SESSION['SESSION_TIMEOUT']) && (time() - $_SESSION['SESSION_TIMEOUT'] > 5400)) ) {
    // last request was more than 30 minutes ago
    session_unset();     // unset $_SESSION variable for the run-time      
    session_destroy();   // destroy session data in storage                 
}
$_SESSION['LAST_ACTIVITY'] = time(); // update last activity time stamp

if(empty($_SESSION['user_name']) && !($_SESSION['user_is_logged_in']))
{
  header('Location: '.$def_path);
}

?>
<!--
#########################
# fRNAkenstein Reloader #
#########################
-->

<script language="javascript">
function reloader()
{
	/* Reload window */
	parent.location.reload();
	/* Set iFrame to empty */
	window.location.assign("about:blank");

}
</script>

<?php
##################################
# Grab values from HTML elements #
##################################
$fqarray = $_POST['fqfilename'];
$procs = strip_tags (htmlspecialchars( escapeshellcmd(htmlentities($_POST['procs']))));
$genome = strip_tags (htmlspecialchars( escapeshellcmd(htmlentities($_POST['genome']))));
$strandedArray = $_POST['stranded'];

############################################
# Some error checking redundancy on inputs #
############################################

if(empty($fqarray))
{
	echo "<h4>Error 1: No Fastq file selected</h4>";
	echo "<input type=\"button\" value=\"Try again!\" onClick=\"return reloader(this);\">";
	exit("");
}

if(empty($procs)){
	echo "<h4>Error 2: Number of proccessors error</h4>";
	echo "<input type=\"button\" value=\"Try again!\" onClick=\"return reloader(this);\">";
	exit("");
}
if(empty($genome)) {
	echo "<h4>Error 3: No genome selected</h4><br>";
	echo "<input type=\"button\" value=\"Try again!\" onClick=\"return reloader(this);\">";
	exit("");
}

# Match GID from selected genome
$pattern = '/(\.)*\[ID: ([0-9]*)(\.)*/';
preg_match($pattern, $genome, $matches, PREG_OFFSET_CAPTURE);
$gid = $matches[2][0];

#verify gid
$json = file_get_contents('https://geco.iplantc.org/coge/api/v1/genomes/'.$gid);
$coge_response = json_decode($json);

if(!is_numeric ($gid) || array_key_exists("error", $coge_response))
{
	echo "<h4>Error 4: No valid genome selected (use the search feature)</h4>";
	echo "<input type=\"button\" value=\"Try again!\" onClick=\"return reloader(this);\">";
	exit("");
}

###########################################################
#Create mapcount run subdirectory if not already exist	  #
###########################################################
$mapdir = "$subdirectories/mapcount_output/".$_SESSION['user_name'];
mkdir($mapdir, 0777, true);
chmod($mapdir, 0777);

########################
# Printing information #
########################
echo "<body >";
echo "<div id='result_div'>";
echo "<h4>Crunching library with data:</h4>";

echo "<p>";
echo "Library file(s) selected: <br>";
foreach ($fqarray as $fqfile){
	echo strip_tags (htmlspecialchars(escapeshellcmd($fqfile)))."<br>";
}
echo "</p>";

echo "<p >";
echo "# Procs: $procs";
echo "</p>";

echo "<p >";
echo "Genome selected: ".stripslashes($genome);
echo "</p>";

echo "<p>";
echo "<b>NOTE:</b><br>Running the pipeline will take a long time; <br> An email will be sent when your run completes.";
echo "</p>";
echo "</div>";

##########################
# Begin front end script #
##########################

# Initialize output command string
$outputcommands = "";
$databasecommands = "";

# Generate a unique ID based on the time and echo it
$mytimeid = date('his.m-d-Y');
echo "<b>Your run ID is: </b> $mytimeid<br><br>";

# Create log path and initialize it
$logfile = "$subdirectories/logs/$mytimeid.mapcount.log";
$logoutput = "User: ".$_SESSION['user_name']."\n";
$logoutput .= "Bash commands...\n";

# Temp output path
$temppath = "$subdirectories/temp_output/" . $_SESSION['user_name'];

#command to look for bowtie indices
$lookForBowtie = "python $subdirectories/test_threading_run.py " . $_SESSION['user_name'] . " " . $gid . " " . $subdirectories .  "\n";

# For every library selected:
foreach($fqarray as $fqoriginal) {
	$isStranded = 0;
	# Initialize moveandgunzip command
	$movecommand = "";

	# Split for double stranded
	$fqdoublestranded = explode("&", $fqoriginal);

	# don't like this but it needs to be done for clarity below
	$fq = $fqdoublestranded[0];

	# To make sure HTSeq command is stranded/unstranded as well
	$htseqstranded = "no";

	# Check if fastq file is zipped
	if (preg_match("/\.gz/", $fq)!=1 ){
		echo("<h4>Error 5: Fastq file not gzipped (.gz)</h4>");
		echo "<input type=\"button\" value=\"Try again!\" onClick=\"return reloader(this);\">";
		exit("");
	} else {

		# If stranded, path is equal to both paths delimited by a space
		if (count($fqdoublestranded)==2) {
			$fqpath = "$subdirectories/fastq_directory/$fqdoublestranded[0]";
			$fqpath2strand = "$subdirectories/fastq_directory/$fqdoublestranded[1]";

			if(preg_match("/\.gz/", $fqpath)==1 and preg_match("/\.gz/", $fqpath2strand)==1){
		
				#Now that we know that we have a paired end library, may be stranded
                                #get just the library number, check to see if among the stranded libraries
                                $libpattern = "/^s*(\d*).*/";
                                preg_match($libpattern, $fqdoublestranded[0], $matches);
                                $librarynum = $matches[1];
                                
                                
                                #check to see if the library number is in the array of stranded libraries
                                foreach($strandedArray as $strandLib)
                                {
                                  if($fqoriginal = $strandLib)
                                  {
                                    $isStranded = 1;
                                  }
                                
                                }

				system("mv $fqpath $temppath/$fqdoublestranded[0]");
				system("mv $fqpath2strand $temppath/$fqdoublestranded[1]");

				#$movecommand .= "gunzip $temppath/\*.gz &&\n";
				$movecommand .= "gunzip $temppath/$fqdoublestranded[0] &&\n";
				$movecommand .= "gunzip $temppath/$fqdoublestranded[1] &&\n";
				$fq = preg_replace("/.gz/","",$fq);
				$fq2 = preg_replace("/.gz/","",$fqdoublestranded[1]);
				$fqpath = "$temppath/$fq";
				$fqpath2strand = "$temppath/$fq2";
				$fqpath = $fqpath." ".$fqpath2strand;
			}

			# this is stranded for htseq also
			$htseqstranded = "yes";
		}
		# Otherwise, it's just equal to the one fastq filepath
		else{
			$fqpath = "$subdirectories/uploads" . "/" . $_SESSION['user_name'] . "/$fq";

			if(preg_match("/\.gz/", $fqpath)==1)
			{
				echo "mv $fqpath $temppath \n";
				//just doing this for today 
				//system("mv $fqpath $temppath/");
				$movecommand .= "gunzip $fqpath &&\n";
				// changing for fRNAk $movecommand .= "gunzip $temppath/$fq &&\n";
				$fq = preg_replace("/.gz/","",$fq);
				$fqpath = "$temppath/$fq";

			}
		}

		# Generate other file paths for annotation and fasta files
		$annopath = "$subdirectories/genome_directory/".$_SESSION['user_name']."/".$gid."/*.gff";
		$fapath = "$subdirectories/genome_directory/".$_SESSION['user_name']."/".$gid."/".$gid;
		$pathToCheckBowtie = "$subdirectories/find_file.py";  

		#command in order to make sure that the bowtie files are computed
		$bowTieCheck = "python $pathToCheckBowtie " . $_SESSION['user_name'] . " " . $genome . " " . $subdirectories ;

		# Parse library number
		$library = preg_replace("/(_[a-zA-Z0-9]*)+(\.[a-zA-Z0-9]*)+/","",$fq);

		# Generate location for output files
		$thoutputfile = "$temppath/library_$library/tophat_out";
		$cloutputfile = "$temppath/library_$library/cufflinks_out";
		$sampath = "$temppath/library_$library/sam_output";
		$htseqpath = "$temppath/library_$library/htseq_output";

		# Generate mkdir commands for new directories
		# -p option prevents errors with pre-existing folders
		$makedirs = "mkdir -p $temppath/library_$library &&\n";
		$makedirs .= "mkdir -p $cloutputfile &&\n";
		$makedirs .= "mkdir -p $thoutputfile &&\n";
		$makedirs .= "mkdir -p $sampath &&\n";
		$makedirs .= "mkdir -p $htseqpath &&";

		# Generate commands for TH and CL
		$thcommand = "tophat"; 
		$clcommand = "cufflinks"; 

		#add the additional command, if stranded
                if($isStranded == 1)
                {
                  $thcommand .= " --library-type fr-firststrand -G $annopath";  
		  $clcommand .= " --library-type fr-firststrand";
                  
                }

		$thcommand .= "-p $procs -o $thoutputfile $fapath $fqpath";
		$clcommand .= "-p $procs -g $annopath -o $cloutputfile $thoutputfile/accepted_hits.bam";

		# Generate HTSeq commands
		$htseqcommand = "samtools view -h -o $sampath/$library.sam $thoutputfile/accepted_hits.bam &&\n";
		$htseqcommand .= "htseq-count -t gene -i ID -s ".$htseqstranded." $sampath/$library.sam $annopath 2>> $logfile 1> $htseqpath/$library.counts &&";
		
		# Move temp files to output directory only after the library has been crunched
		$mvcommand = "mv -f $temppath/library_$library $mapdir/library_$library &&\n";
	
		# Append library commands to the output command string
		$singleoutputcommand = "$makedirs\n$thcommand >> $logfile 2>&1 &&\n$clcommand >> $logfile 2>&1 &&\n$htseqcommand\n";
		$outputcommands = $outputcommands.$movecommand.$singleoutputcommand.$mvcommand;

		# Build log output
		$logoutput = $logoutput."Fastq file: $fqoriginal\n"."Command generated: ".$singleoutputcommand;
		#show the user the commands:
		echo "the job commands are as follow:\n"; 
		echo "$thclcommand" . " is the tophat command\n";
		echo "$clcommand" . " is the cufflinks command\n";
		echo "$htseqcommand" . "is the htseq count and samtools command";
	}
}

# Create bash file output directory
$bashdir = "$subdirectories/bash_scripts/".$_SESSION['user_name'];
$oldbashdir = "$subdirectories/old_bash_scripts/".$_SESSION['user_name'];
$bashfile = "$bashdir/run_$mytimeid.mapcount.sh";
$userFileInGetGenome = "$subdirectories/genome_directory/" . $_SESSION['user_name'];

# Add mv bashfile command to the end to prevent re-running
$mvbashcommand = "\nmv -f $bashfile $oldbashdir";

# Append to log output (TH and CL will redirect stderr to log file)
$logoutput = $logoutput."MapCount output...\n";


# generate the mail commands
//$mailtext = "Hello ".$_SESSION['user_name'].",\n";
//$mailtext .= "Your Mapcount run information for run ID $mytimeid is...\n";
//$mailtext .= "\nFastq files:\n";
//foreach ($fqarray as $fqfile){
//	$mailtext .= "$fqfile\n";
//}
//$mailtext .= "\nAnnotation File:\n$anno\n\nAnnotation Type:\n$annotype\n";
//$mailtext .= "\nFasta File:\n$fa\n";
//$mailtext .= "\nYour run will take some time to complete.\n";
//$mailtext .= "You can view the status of your run using the fRNAkenstein status page.\n";
//$mailtext .= "An email will be sent to you upon completion of this run.\n";
//$mailtext .= "\n- fRNAkenstein Team";

//$premailcommand = 'echo "'.$mailtext.'" | mail -s "$(echo -e "fRNAkenstein MapCount Run\nFrom: fRNAkbox <wtreible@raven.anr.udel.edu>\n")" '.$_SESSION['user_email']."\n";

#$postmailcommand = 'if [ $? -eq 0 ]; then\n\t
//$postmailcommand = 'echo "Your MapCount run with ID: '.$mytimeid.' completed successfully! You can now run differential expression analysis on this data!" | mail -s "$(echo -e "fRNAkenstein MapCount Successful!\nFrom: fRNAkbox <wtreible@raven.anr.udel.edu>\n")" '.$_SESSION['user_email'];
#\nelse\n\techo "Your MapCount run with ID: '.$mytimeid.' was unsuccessful! Please email an administrator with your run ID and subject line \"fRNAkenstein error\"" | mail -s "$(echo -e "fRNAkenstein MapCount Unsuccessful\nFrom: fRNAkbox <wtreible@raven.anr.udel.edu>\n")" '.$_SESSION['user_email'].'\nfi';

//$outputcommands = $premailcommand.
$outputcommands = $logFile.$outputcommands; //.$postmailcommand;

#generate header and add to the existing list of commands
$outputcommands = "#!/bin/bash\n".$lookForBowtie.$outputcommands.$mvbashcommand;

# if this user doesn't have directories, make them
mkdir($bashdir, 0777);
chmod($bashdir, 0777);
mkdir($oldbashdir, 0777);
chmod($oldbashdir, 0777);

#make the directories for them in the get genome folder
mkdir($userFileInGetGenome, 0777);
chmod($userFileInGetGenome, 0777);

# Write files
file_put_contents($logfile, $logoutput);
file_put_contents($bashfile, $outputcommands, LOCK_EX);
chmod($bashfile, 0777);
chmod($logfile, 0777);

#execute get_genome
exec( "python ".$subdirectories."/get_genome.py ".$_SESSION['access_token']." ".$_SESSION['user_name']." ".$gid." > /dev/null &");
?>

<input type="button" value="Run fRNAkenstein again!" onClick="return reloader(this);">

</body>
</html>
